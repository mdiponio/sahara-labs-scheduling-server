<?xml version="1.0" encoding="UTF-8"?>
<!--
					## Sahara Scheduling Server ##

Copyright (c) 2009, University of Technology, Sydney
All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are met:

	* Redistributions of source code must retain the above copyright notice, 
	this list of conditions and the following disclaimer.
	* Redistributions in binary form must reproduce the above copyright 
	notice, this list of conditions and the following disclaimer in the 
	documentation and/or other materials provided with the distribution.
	* Neither the name of the University of Technology, Sydney nor the names 
	of its contributors may be used to endorse or promote products derived from 
	this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Author: Michael Diponio (mdiponio)
Date: 28th December 2009
-->
<project name="Scheduling Server" default="build" basedir=".">
	
	<!-- Generate bundle location. -->
	<property name="bundles.dir" location="bundles" />
	<property name="bin.dir" location="bin" />
	<property name="package.name" location="SchedulingServer" />
	<property name="package.dir" location="package" />
	<property name="tool.lib.dir" location="test/tools" /> <!-- Static analysis tools. -->
	
	<macrodef name="iterate">
	<attribute name="target"/>
	<sequential>
		<subant target="@{target}" verbose="true">
			<fileset dir="." includes="*/build.xml"/>
		</subant>
	</sequential>
	</macrodef>
	
	<!-- NSIS tools classpath -->
	<path id="nsis.tools"> 
		<fileset dir="${tool.lib.dir}">
			<include name="nsisant-1.3.jar" />
		</fileset>
	</path>
	
	<!-- Conditions to determine Operating System. -->
	<condition property="isWindows">
		<os family="windows" />
	</condition>
	<condition property="isUNIX">
		<os family="unix" />
	</condition>
	
	<!-- Do all tasks on all nested ant build files. -->
	<target name="all">
		<iterate target="all" />
		<copy todir="${bundles.dir}" flatten="yes">
			<fileset dir=".">
				<include name="**/bundle/*.jar" />
			</fileset>
		</copy>
	</target>
	
	<!-- Build all source and generate all bundles. -->
	<target name="build">
		<iterate target="bundle" />
		<mkdir dir="${bundles.dir}" />
		<copy todir="${bundles.dir}" flatten="yes">
			<fileset dir=".">
				<include name="**/bundle/*.jar" />
			</fileset>
		</copy>
		<subant target="dist" verbose="true">
			<fileset dir="." includes="SchedServer-Framework/build.xml"/>
		</subant>
		<mkdir dir="${bin.dir}" />
		<copy todir="${bin.dir}" flatten="yes">
			<fileset dir=".">
				<include name="**/dist/*.jar" />
			</fileset>
		</copy>
	</target>
	
	<!-- Do the test target on all the nested build files. -->
	<target name="test" depends="build">
		<iterate target="test" />
	</target>
	
	<!-- Generate the schema using the DataAccess project. -->
	<target name="schema">
		<subant target="schema" verbose="true">
			<fileset dir="." includes="DataAccess/build.xml"/>
		</subant>
	</target>
	
	<!-- Linux Service Wrapper. -->
	<target name="lin-servicewrapper" if="isUNIX">
		<exec executable="make" dir="servicewrapper" failonerror="true" />
	</target>
	
	<!-- Package generates all packages. -->
	<target name="package" depends="tar-package,win-package,rpm-package" />
	
	<!-- System agnostic tar package. -->
	<target name="tar-package" depends="build,schema,lin-servicewrapper">
		<tstamp>
			<format property="package.time" pattern="MM-dd-yyyy_hh.mm"/>
		</tstamp>
		<mkdir dir="${package.dir}" />
		<tar destfile="${package.name}_${package.time}.tar.gz" compression="gzip">
			<tarfileset prefix="SchedulingServer/bin" dir="${bin.dir}" username="${user.name}" group="${user.name}">
				<include name="*" />
				<exclude name="**/.svn/* "/>
				<exclude name="**/.*" />
			</tarfileset>
			<tarfileset prefix="SchedulingServer/bundles" dir="${bundles.dir}" username="${user.name}" group="${user.name}">
				<include name="*" />
				<exclude name="**/.svn/* "/>
				<exclude name="**/.*" />
			</tarfileset>
			<tarfileset prefix="SchedulingServer/conf" dir="conf" username="${user.name}" group="${user.name}">
				<include name="*" />
				<exclude name="**/.svn/* "/>
				<exclude name="**/.*" />
			</tarfileset>
			<tarfileset prefix="SchedulingServer/doc" dir="doc" username="${user.name}" group="${user.name}">
				<include name="*" />
					<exclude name="**/.svn/* "/>
					<exclude name="**/.*" />
			</tarfileset>
			<tarfileset prefix="SchedulingServer" dir="." username="${user.name}" group="${user.name}">
				<include name="LICENSE" />
				<exclude name="**/.svn/* "/>
				<exclude name="**/.*" />
			</tarfileset>
			<tarfileset prefix="SchedulingServer" dir="servicewrapper" username="${user.name}" group="${user.name}" filemode="755">
				<include name="schedulingservice" />
			</tarfileset>
			<tarfileset prefix="SchedulingServer" dir="servicewrapper/WindowsServiceWrapper/Release/" username="${user.name}" group="${user.name}">
				<include name="schedulingservice.exe" />
			</tarfileset>
			<tarfileset prefix="SchedulingServer" dir="doc/db/schema" username="${user.name}" group="${user.name}">
				<include name="*.sql" />
			</tarfileset>
		</tar>
		<move file="${package.name}_${package.time}.tar.gz" todir="${package.dir}" />
	</target>

	<!-- Windows Installer. -->
	<property name="win.target.arch" value="x86" />
	<property name="nsis.path" value="C:/Program Files (x86)/NSIS" />
    <target name="win-package" depends="build,schema" if="isWindows">
        <mkdir dir="${package.dir}"/>
        <taskdef name="nsis" classpathref="nsis.tools" classname="com.danielreese.nsisant.Task" />
        <echo>Building arch ${win.target.arch}.</echo>
        <nsis script="schedulingserver.nsi" verbosity="3" out="${package.dir}/schedulingserver.log" path="${nsis.path}">
            <define name="Arch" value="${win.target.arch}" />
        </nsis>
    </target>
	
	<!-- Redhat installer. -->
	<target name="rpm-package" depends="build,schema,lin-servicewrapper" if="isUNIX">
		<mkdir dir="rpmtmp" />
		<mkdir dir="rpmtmp/BUILD" />
		<mkdir dir="rpmtmp/BUILDROOT" />
		<mkdir dir="rpmtmp/RPMS" />
		<mkdir dir="rpmtmp/SOURCES" />
		<mkdir dir="rpmtmp/SPECS" />
		<mkdir dir="rpmtmp/SRPMS" />
		<rpm specFile="../../schedulingserver.spec"  
 			command="--buildroot=${basedir}/rpmtmp/BUILDROOT -bb"
			topDir="${basedir}/rpmtmp"
			failonerror="true" />
		<mkdir dir="${package.dir}" />
		<copy todir="${package.dir}" overwrite="true" flatten="true">
			<fileset dir="rpmtmp/RPMS" includes="**/*.rpm" />
		</copy>
		<delete dir="rpmtmp" />
	</target>
	
	<!-- Clean all. -->
	<target name="clean" depends="cleanlinux">
		<iterate target="clean" />
		<delete dir="${bundles.dir}" />
		<delete dir="${bin.dir}" />
		<delete dir="cache" />
		<delete dir="${package.dir}" />
		<delete file="SaharaSchedulingServer.exe" />
		<delete dir="_axis2" />
	</target>
	
	<target name="cleanlinux" if="isUNIX">
		<exec executable="make" dir="servicewrapper" failonerror="true">
			<arg value="clean" />
		</exec>
	</target>
</project>
